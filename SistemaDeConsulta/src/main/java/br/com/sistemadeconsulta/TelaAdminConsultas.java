package br.com.sistemadeconsulta;

import br.com.sistemadeconsulta.classes.Consulta;
import br.com.sistemadeconsulta.classes.Paciente;
import br.com.sistemadeconsulta.dao.ConsultaDAO;
import br.com.sistemadeconsulta.dao.PacienteDAO;
import br.com.sistemadeconsulta.utils.TextUtils;

import java.util.List;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author patri
 */
public class TelaAdminConsultas extends javax.swing.JFrame {

    /**
     * Creates new form TelaAdminConsultas
     */
    public TelaAdminConsultas() {
        initComponents();
        setLocationRelativeTo(null);
        preencheTabelaConsultas(new ConsultaDAO().listarConsultas());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TextUtils textUtils = new TextUtils();

        javax.swing.JPanel jPanel1 = new javax.swing.JPanel();
        javax.swing.JLabel jLabel1 = new javax.swing.JLabel();
        NomePaciente = new javax.swing.JTextField();
        javax.swing.JLabel jLabel4 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel5 = new javax.swing.JLabel();
        javax.swing.JButton btnBuscar = new javax.swing.JButton();
        // Variables declaration - do not modify//GEN-BEGIN:variables
        javax.swing.JButton btnVoltar = new javax.swing.JButton();
        javax.swing.JButton btnExcluir = new javax.swing.JButton();
        javax.swing.JButton btnAtualizar = new javax.swing.JButton();
        javax.swing.JLabel jLabel2 = new javax.swing.JLabel();
        javax.swing.JScrollPane jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        textUtils.setLabel(jLabel1, "Nome Paciente");

        NomePaciente.addActionListener(evt -> NomePacienteActionPerformed());

        textUtils.setLabel(jLabel4, "Dados");
        textUtils.setLabel(jLabel5, "Filtros: ");

        btnBuscar.setText("Pesquisar");
        btnBuscar.addActionListener(evt -> btnBuscarActionPerformed());

        btnVoltar.setText("Voltar");
        btnVoltar.addActionListener(evt -> BtnVoltarActionPerformed());

        btnExcluir.setText("Excluir");
        btnExcluir.addActionListener(evt -> btnExcluirActionPerformed());

        btnAtualizar.setText("Atualizar");
        btnAtualizar.addActionListener(evt -> btnAtualizarActionPerformed());

        textUtils.setLabel(jLabel2, "Administração Consultas");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Numero da Consulta", "Nome Paciente", "Equipe Medica", "Data Consula", "Hora Consulta"
            }
        ) {
            final Class<?>[] types = new Class [] {
                java.lang.Long.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class<?> getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnBuscar)
                                .addGap(18, 18, 18)
                                .addComponent(btnExcluir)
                                .addGap(18, 18, 18)
                                .addComponent(btnAtualizar))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(NomePaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(9, 9, 9)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnVoltar)
                        .addGap(7, 7, 7))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(99, 99, 99)
                        .addComponent(jLabel2)
                        .addContainerGap(128, Short.MAX_VALUE))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jLabel2)
                .addGap(29, 29, 29)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(NomePaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(46, 46, 46)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBuscar)
                    .addComponent(btnVoltar)
                    .addComponent(btnExcluir)
                    .addComponent(btnAtualizar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void NomePacienteActionPerformed() {//GEN-FIRST:event_NomePacienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NomePacienteActionPerformed

    private void btnBuscarActionPerformed() {//GEN-FIRST:event_btnBuscarActionPerformed
        try {
            String nomePaciente = NomePaciente.getText();

            if (!nomePaciente.isEmpty()) {
                PacienteDAO pacienteDAO = new PacienteDAO();
                Paciente paciente = pacienteDAO.buscarPorNome(nomePaciente);

                if (paciente != null) {
                    ConsultaDAO consultaDAO = new ConsultaDAO();
                    List<Consulta> consultas = consultaDAO.buscarConsultasPorPaciente(paciente);

                    preencheTabelaConsultas(consultas);

                    if (consultas.isEmpty()) {
                        JOptionPane.showMessageDialog(this, "Não foram encontradas consultas para o paciente informado.");
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Paciente não encontrado.");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Digite o nome do paciente para buscar suas consultas.");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Ocorreu uma falha:\n" + e.getMessage());
        }
    }

    private void preencheTabelaConsultas(List<Consulta> consultas) {
        DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
        modelo.setRowCount(0);

        for (Consulta consulta : consultas) {
            int idConsulta = consulta.getIdConsulta();
            String nomePaciente = "";
            String nomeEquipe = "";
            String dataConsulta = "";
            String horaConsulta = "";

            if (consulta.getPaciente() != null) {
                nomePaciente = consulta.getPaciente().getNome();
            }

            
            if (consulta.getEquipe() != null) {
                nomeEquipe = consulta.getEquipe().getNomeMedico(); 
            }

            if (consulta.getDataConsulta() != null) {
                dataConsulta = consulta.getDataConsulta().toString();
            }

            if (consulta.getHoraConsulta() != null) {
                horaConsulta = consulta.getHoraConsulta().toString();
            }

            modelo.addRow(new Object[]{idConsulta, nomePaciente, nomeEquipe, dataConsulta, horaConsulta});
        }

    }//GEN-LAST:event_btnBuscarActionPerformed

    private void BtnVoltarActionPerformed() {//GEN-FIRST:event_BtnVoltarActionPerformed
        EscolhaTelasAdmin escolha = new EscolhaTelasAdmin();
        escolha.setVisible(true);
        dispose();

    }//GEN-LAST:event_BtnVoltarActionPerformed

    private void btnExcluirActionPerformed() {//GEN-FIRST:event_btnExcluirActionPerformed
        int linhaSelecionada = jTable1.getSelectedRow();

        if (linhaSelecionada >= 0) {
            Object valorCelula = jTable1.getValueAt(linhaSelecionada, 0);

            // Verifica se o valor da célula não é nulo e se é uma instância de Integer
            if (valorCelula instanceof Integer) {
                int idConsulta = (int) valorCelula;

                try {
                    ConsultaDAO consultaDAO = new ConsultaDAO();
                    Consulta consultaParaExcluir = consultaDAO.buscarConsultaPorId(idConsulta);

                    if (consultaParaExcluir != null) {
                        consultaDAO.removerConsulta(consultaParaExcluir);
                        JOptionPane.showMessageDialog(this, "Consulta excluída com sucesso!");

                        // Atualiza a tabela após a exclusão
                        List<Consulta> consultasAtualizadas = consultaDAO.listarConsultas();
                        preencheTabelaConsultas(consultasAtualizadas);
                    } else {
                        JOptionPane.showMessageDialog(this, "Consulta não encontrada para exclusão.");
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, "Falha ao excluir consulta:\n" + e.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(this, "Valor da célula não é um ID de consulta válido.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Selecione uma consulta para excluir.");
        }


    }//GEN-LAST:event_btnExcluirActionPerformed

    private void btnAtualizarActionPerformed() {//GEN-FIRST:event_btnAtualizarActionPerformed

        try {

            ConsultaDAO consultaDAO = new ConsultaDAO();
            List<Consulta> consultasAtualizadas = consultaDAO.listarConsultas(); // Obter as consultas atualizadas

            preencheTabelaConsultas(consultasAtualizadas);

            JOptionPane.showMessageDialog(this, "Dados atualizados com sucesso!");

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Falha ao atualizar dados:\n" + e.getMessage());
        }

    }//GEN-LAST:event_btnAtualizarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException |
                 UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaAdminConsultas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new TelaAdminConsultas().setVisible(true));
    }

    private javax.swing.JTextField NomePaciente;
    private javax.swing.JTable jTable1;
}
